# -*- python -*-
# ex: set syntax=python:

# TODO:
# upload windows distro
# win-32

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.svnpoller import split_file_alwaystrunk
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.changes import filter

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

import os

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

password = open('halide_bb_pass.txt').read()
c['slaves'] = [BuildSlave('linux-slave',     password, max_builds = 1),
               BuildSlave('mac-slave',       password, max_builds = 1),
               BuildSlave('arm-linux-slave', password, max_builds = 1),
               BuildSlave('win-slave',       password, max_builds = 1)]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of halide.


c['change_source'] = []

c['change_source'].append(GitPoller(
        'git://github.com/Halide/halide.git',
        workdir = 'gitpoller-workdir',
        branch = 'master',
        pollinterval = 300))

c['change_source'].append(SVNPoller(
        svnurl = 'http://llvm.org/svn/llvm-project/llvm/trunk',
        split_file = split_file_alwaystrunk,
        pollAtLaunch = True))

c['change_source'].append(SVNPoller(
        svnurl = 'http://llvm.org/svn/llvm-project/cfe/trunk',
        split_file = split_file_alwaystrunk,
        pollAtLaunch = True))

####### CODEBASES

all_repositories = {
    r'git://github.com/Halide/halide.git' : 'halide',
    r'http://llvm.org/svn/llvm-project/llvm/trunk' : 'llvm-trunk',
    r'http://llvm.org/svn/llvm-project/cfe/trunk' : 'clang-trunk',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_360/final' : 'llvm-360',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_360/final' : 'clang-360',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_352/final' : 'llvm-352',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_352/final' : 'clang-352',
    r'https://chromium.googlesource.com/native_client/pnacl-llvm.git' : 'llvm-pnacl',
    r'https://chromium.googlesource.com/native_client/pnacl-clang.git' : 'clang-pnacl'
}

def codebase_generator(chdict):
    print 'codebase_generator chdict=%s' % chdict
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebase_generator

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.transfer import FileUpload
from buildbot.steps.slave import MakeDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Property
from buildbot.process.properties import renderer
from buildbot.process.properties import Interpolate

def add_get_source_steps(factory, llvm):

  llvm_codebase  = 'llvm-' + llvm
  clang_codebase = 'clang-' + llvm
  if llvm == 'trunk':
    llvm_svn_path = 'trunk'
  else:
    llvm_svn_path = 'tags/RELEASE_' + llvm + '/final'

  factory.addStep(Git(name='Get Halide master',
                      codebase='halide',
                      workdir='halide',
                      repourl='git://github.com/Halide/halide.git',
                      mode='incremental'))

  if llvm_codebase == 'llvm-pnacl':
    factory.addStep(Git(name = 'Get LLVM source',
                        codebase = llvm_codebase,
                        workdir = 'llvm',
                        repourl = 'https://chromium.googlesource.com/native_client/pnacl-llvm.git',
                        mode = 'incremental'))

    factory.addStep(ShellCommand(name = 'Checkout LLVM pepper_41',
                                 workdir = 'llvm',
                                 command = ['git',
                                            'checkout',
                                            'b82e6c61c08dcd77a97cf6cb5020898bb49f97a8']))

    factory.addStep(Git(name = 'Get Clang source',
                        codebase = llvm_codebase,
                        workdir = 'llvm/tools/clang',
                        repourl = 'https://chromium.googlesource.com/native_client/pnacl-clang.git',
                        mode = 'incremental'))

    factory.addStep(ShellCommand(name = 'Checkout clang pepper_41',
                                 workdir = 'llvm/tools/clang',
                                 command = ['git',
                                            'checkout',
                                            'a46d3ebfd8f295a32e2dab6241d207e04302b483']))
  else:
    factory.addStep(SVN(name = 'Get LLVM source',
                        codebase = llvm_codebase,
                        workdir = 'llvm',
                        repourl = r'http://llvm.org/svn/llvm-project/llvm/%s' % llvm_svn_path,
                        mode = 'incremental'))

    factory.addStep(SVN(name = 'Get Clang source',
                        codebase = clang_codebase,
                        workdir = 'llvm/tools/clang',
                        repourl = r'http://llvm.org/svn/llvm-project/cfe/%s' % llvm_svn_path,
                        mode = 'incremental'))

@renderer
def get_distrib_name(props):
    rev = props.getProperty('got_revision')['halide']
    builder = props.getProperty('buildername')
    return '~/artifacts/halide-' + builder + '-' + rev + '.tgz'

def get_llvm_cmake_command(os):
  llvm_cmake_command = [
    'cmake',
    '-DCMAKE_INSTALL_PREFIX=../llvm-install',
    '-DLLVM_ENABLE_TERMINFO=OFF',
    '-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips',
    '-DLLVM_ENABLE_ASSERTIONS=ON',
    '-DCMAKE_BUILD_TYPE=Release']
  if '-32' in os:
    llvm_cmake_command.append('-DLLVM_BUILD_32_BITS=ON')
  else:
    llvm_cmake_command.append('-DLLVM_BUILD_32_BITS=OFF')

  llvm_cmake_command.append('../llvm/')

  if os.startswith('linux-32'):
    llvm_cmake_command.append('-DCMAKE_FIND_ROOT_PATH=/usr/lib/i386-linux-gnu')
    llvm_cmake_command.append('-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY')

  return llvm_cmake_command

def get_env(os):
  env = {'LLVM_CONFIG': '../llvm-build/bin/llvm-config',
         'CLANG': '../llvm-build/bin/clang'}

  cxx = 'c++'
  cc = 'cc'
  ld = 'ld'

  if os.startswith('linux'):
    if os.endswith('48'):
      cc = 'gcc-4.8'
      cxx = 'g++-4.8'
    else:
      cc = 'gcc-4.9'
      cxx = 'g++-4.9'
    ld = 'ld'
    if '-32' in os:
      cxx += ' -m32'
      cc += ' -m32'
      ld += ' -melf_i386'
  elif os.startswith('mac'):
    if '-32' in os:
      cxx += ' -m32'
      cc += ' -m32'

  env['CXX'] = cxx
  env['CC'] = cc
  env['LD'] = ld
  return env

def get_make_threads(os):
  if os.startswith('linux'):
    return 16
  elif os.startswith('mac'):
    return 4
  else:
    return 1

def get_targets(os):
  targets = ['distrib', 'build_tests', 'test_correctness', 'test_performance', 'test_generators']
  if '-64' in os:
    targets.extend(['test_apps', 'test_tutorials', 'test_python'])
  return targets

def get_slave(os):
  if os.startswith('linux'):
    return 'linux-slave'
  elif os.startswith('mac'):
    return 'mac-slave'
  elif os.startswith('win'):
    return 'win-slave'
  elif os.startswith('arm-linux'):
    return 'arm-linux-slave'

def create_factory(os, llvm):

  if os == 'win': return create_win_factory(os, llvm)

  llvm_cmake_command = get_llvm_cmake_command(os)
  env           = get_env(os)
  targets       = get_targets(os)
  make_threads  = get_make_threads(os)

  factory = BuildFactory()
  add_get_source_steps(factory, llvm)

  factory.addStep(ShellCommand(name = 'Configure LLVM',
                               workdir = 'llvm-build',
                               env = env,
                               command = llvm_cmake_command))
  factory.addStep(ShellCommand(name = 'Build LLVM',
                               workdir = 'llvm-build',
                               env = env,
                               command = ['make', '-j%s' % make_threads]))

  # Force a full rebuild of Halide every time
  factory.addStep(RemoveDirectory(dir='halide-build'))

  for target in targets:
    p = make_threads
    if target == 'test_performance': p = 1
    factory.addStep(ShellCommand(name = 'make ' + target,
                                 workdir = 'halide-build',
                                 env = env,
                                 command = ['make', '-f', '../halide/Makefile', '-j%s' % p, target],
                                 timeout = 3600))
  factory.addStep(
    FileUpload(slavesrc = 'distrib/halide.tgz',
               workdir = 'halide-build',
               mode = 0644,
               masterdest = get_distrib_name))

  factory.addStep(MasterShellCommand(
    path = '/home/abadams/artifacts',
    command = ['bash', '/home/abadams/build_bot/clean_artifacts.sh']))

  return factory

def create_win_factory(os, llvm):
  assert os.startswith('win')

  factory = BuildFactory()
  add_get_source_steps(factory, llvm)

  if llvm == 'trunk':
    llvm_version = '38'
  else:
    llvm_version = llvm[0:2]

  factory.addStep(
    ShellCommand(name = 'Configure LLVM',
                 workdir = 'llvm-build',
                 command = ['cmake',
                            '-DCMAKE_INSTALL_PREFIX=../llvm-install',
                            '-DLLVM_ENABLE_TERMINFO=OFF',
                            '-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips',
                            '-DLLVM_ENABLE_ASSERTIONS=ON',
                            '-DLLVM_BUILD_32_BITS=OFF',
                            '-DCMAKE_BUILD_TYPE=Release',
                            '../llvm/',
                            '-G',
                            'Visual Studio 12 Win64']))

  for config in ['Release', 'Debug']:
    factory.addStep(RemoveDirectory(dir = 'llvm-build\\' + config))

    factory.addStep(
      ShellCommand(workdir = 'llvm-build',
                   name = 'Build LLVM ' + config,
                   command = ['MSBuild.exe',
                              '/m',
                              '/t:Build',
                              '/p:Configuration=' + config,
                              '.\\ALL_BUILD.vcxproj']))

    factory.addStep(RemoveDirectory(dir = 'halide-build-' + config))
    factory.addStep(MakeDirectory(dir = 'halide-build-' + config))
    factory.addStep(
      ShellCommand(name = 'Configure Halide ' + config,
                   workdir = 'halide-build-' + config,
                   command = ['cmake',
                               Interpolate('-DLLVM_BIN=%(prop:workdir)s\\llvm-build\\' + config + '\\bin'),
                               Interpolate('-DLLVM_INCLUDE=%(prop:workdir)s\\llvm\\include;%(prop:workdir)s\\llvm-build\\include'),
                               Interpolate('-DLLVM_LIB=%(prop:workdir)s\\llvm-build\\' + config + '\\lib'),
                               '-DLLVM_VERSION=%s' % llvm_version,
                               '-DTARGET_NATIVE_CLIENT=OFF',
                               '-DBUILD_TYPE=' + config,
                               '-G',
                               'Visual Studio 12 Win64',
                               '..\\halide']))
    factory.addStep(
      ShellCommand(name = 'Build Halide ' + config,
                   workdir = 'halide-build-' + config,
                   command = ['MSBuild.exe',
                              '/m',
                              '/t:Build',
                              '/p:Configuration=' + config,
                              '.\\ALL_BUILD.vcxproj']))

    if config == 'Release':
      factory.addStep(
        ShellCommand(name = 'Test Halide correctness ' + config,
                     workdir = 'halide-build-' + config,
                     timeout = 3600,
                     command = ['cmd', '/c',
                                'for', '%i', 'in', '(bin\\' + config + '\\correctness*.exe)', 'do', '(%i)']))
      factory.addStep(
        ShellCommand(name = 'Test Halide performance ' + config,
                     workdir = 'halide-build-' + config,
                     timeout = 3600,
                     command = ['cmd', '/c',
                                'for', '%i', 'in', '(bin\\' + config + '\\performance*.exe)', 'do', '(%i)']))
  return factory


def create_builder(os, llvm):
  factory = create_factory(os, llvm)

  builder = BuilderConfig(name = os + '-' + llvm,
                          slavenames = [get_slave(os)],
                          factory = factory,
                          tags = ['os-' + os, 'llvm-' + llvm])

  builder.llvm = llvm
  builder.os = os

  c['builders'].append(builder)

def create_scheduler(llvm):

  oses = [b.os for b in c['builders'] if b.llvm == llvm]

  scheduler = SingleBranchScheduler(
    name = 'halide-' + llvm,
    codebases = {'halide': {'repository':''},
                 'llvm-' + llvm: {'repository':''},
                 'clang-' + llvm: {'repository':''}},
                 change_filter = filter.ChangeFilter(),
                 treeStableTimer = 10, # seconds
                 builderNames = [b.name for b in c['builders'] if b.llvm == llvm])

  c['schedulers'].append(scheduler)

  scheduler = ForceScheduler(
    name = 'force-' + llvm,
    builderNames = [b.name for b in c['builders'] if b.llvm == llvm],
    codebases = {'halide': {'repository':''},
                 'llvm-' + llvm: {'repository':''},
                 'clang-' + llvm: {'repository':''}})

  c['schedulers'].append(scheduler)

c['builders'] = []
create_builder('arm-linux-32', 'trunk')
create_builder('linux-32-gcc48', 'trunk')
#create_builder('linux-32-gcc48', '360')
#create_builder('linux-32-gcc48', '352')
create_builder('linux-32-gcc48', 'pnacl')
create_builder('linux-64-gcc48', 'trunk')
#create_builder('linux-64-gcc48', '360')
#create_builder('linux-64-gcc48', '352')
create_builder('linux-64-gcc48', 'pnacl')
create_builder('linux-32-gcc49', 'trunk')
create_builder('linux-32-gcc49', '360')
create_builder('linux-32-gcc49', '352')
create_builder('linux-32-gcc49', 'pnacl')
create_builder('linux-64-gcc49', 'trunk')
create_builder('linux-64-gcc49', '360')
create_builder('linux-64-gcc49', '352')
create_builder('linux-64-gcc49', 'pnacl')
create_builder('mac-32', 'trunk')
create_builder('mac-32', '360')
create_builder('mac-32', '352')
create_builder('mac-32', 'pnacl')
create_builder('mac-64', 'trunk')
create_builder('mac-64', '360')
create_builder('mac-64', '352')
create_builder('mac-64', 'pnacl')
create_builder('win', 'trunk')

c['schedulers'] = []
create_scheduler('trunk')
create_scheduler('352')
create_scheduler('360')
create_scheduler('pnacl')


# Set the builder priorities
def prioritize_builders(master, builders):
  # 1) prioritize llvm 3.6 - this is a stable llvm, so it should only
  # break if there's a breaking Halide change. This is the immediate
  # feedback we want when a new Halide change is committed
  #
  builders = ([b for b in builders if b.name.endswith('360')] +
              [b for b in builders if b.name.endswith('trunk')] +
              [b for b in builders if b.name.endswith('352')] +
              [b for b in builders if b.name.endswith('pnacl')])

  # gcc 4.8 is just for making distros. It doesn't need frequent testing.
  builders = ([b for b in builders if 'gcc48' not in b.name] +
              [b for b in builders if 'gcc48' in b.name])

  return builders

c['prioritizeBuilders'] = prioritize_builders

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from os.path import expanduser

authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.HTPasswdAprAuth(expanduser('~') + '/.htpasswd-halide'),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port = 8010,
                                  authz = authz_cfg,
                                  order_console_by_time = True))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'Halide'
c['titleURL'] = 'http://halide-lang.org'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://104.154.46.123/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
