# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.svnpoller import split_file_alwaystrunk
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.changes import filter

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

import os

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

c['slaves'] = [BuildSlave("linux-slave", os.environ.get('HALIDE_BB_PASS'), max_builds=1),
               BuildSlave("mac-slave", os.environ.get('HALIDE_BB_PASS'), max_builds=1),
               BuildSlave("arm-linux-slave", os.environ.get('HALIDE_BB_PASS'), max_builds=1),
               BuildSlave("win-slave", os.environ.get('HALIDE_BB_PASS'), max_builds=1)]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of halide.


c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/Halide/halide.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))


c['change_source'].append(SVNPoller(
        svnurl='http://llvm.org/svn/llvm-project/llvm/trunk',
        split_file=split_file_alwaystrunk,
        pollAtLaunch=True))
c['change_source'].append(SVNPoller(
        svnurl='http://llvm.org/svn/llvm-project/cfe/trunk',
        split_file=split_file_alwaystrunk,
        pollAtLaunch=True))

####### CODEBASES

all_repositories = {
    r'git://github.com/Halide/halide.git': 'halide',
    r'http://llvm.org/svn/llvm-project/llvm/trunk': 'llvm-trunk',
    r'http://llvm.org/svn/llvm-project/cfe/trunk': 'clang-trunk',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_360/final': 'llvm-360',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_360/final': 'clang-360',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_352/final': 'llvm-352',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_352/final': 'clang-352',
}

def codebaseGenerator(chdict):
    print "codebaseGenerator chdict=%s" % chdict
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
for llvm in ["trunk", "360", "352"]:
  oses = ["linux-32-gcc48",
          "linux-64-gcc48",
          "linux-32-gcc49",
          "linux-64-gcc49",
          "mac-32",
          "mac-64"]
  if llvm == "trunk": 
      oses.append("win")
      oses.append("arm-linux-32")

  c['schedulers'].append(
    SingleBranchScheduler(
      name = "halide-" + llvm,
      codebases = {'halide': {'repository':''},
                   'llvm-' + llvm: {'repository':''},
                   'clang-' + llvm: {'repository':''}},
                   change_filter = filter.ChangeFilter(),
                   treeStableTimer = 10, # 10 seconds
                   builderNames = [os + "-" + llvm for os in oses]))

  c['schedulers'].append(
    ForceScheduler(
      name = "force-" + llvm,
      builderNames = [os + "-" + llvm for os in oses],
      codebases={'halide': {'repository':''},
                 'llvm-' + llvm: {'repository':''},
                 'clang-' + llvm: {'repository':''}}))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.transfer import FileUpload
from buildbot.steps.slave import MakeDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Property
from buildbot.process.properties import renderer
from buildbot.process.properties import Interpolate

def AddGetSourcesSteps(factory, llvm_svn_path, llvm_codebase, clang_codebase):
  factory.addStep(SVN(name='Get LLVM sources',
                      codebase=llvm_codebase,
                      workdir='llvm',
                      repourl=r'http://llvm.org/svn/llvm-project/llvm/%s' % llvm_svn_path,
                      mode='incremental'))

  factory.addStep(SVN(name='Get Clang sources',
                      codebase=clang_codebase,
                      workdir='llvm/tools/clang',
                      repourl=r'http://llvm.org/svn/llvm-project/cfe/%s' % llvm_svn_path,
                      mode='incremental'))

  factory.addStep(Git(name='Get Halide master',
                      codebase='halide',
                      workdir='halide',
                      repourl='git://github.com/Halide/halide.git',
                      mode='incremental'))


@renderer
def make_distrib_name(props):
    rev = props.getProperty('got_revision')['halide']
    builder = props.getProperty('buildername')
    return "~/artifacts/halide-" + builder + "-" + rev + ".tgz"
  
def CreateFactory(cmake_command, llvm_svn_path, llvm_codebase, clang_codebase,
                  make_parallelization, targets, cxx, ld, os, llvm):

  env = {"LLVM_CONFIG": "../llvm-build/bin/llvm-config",
         "CLANG": "../llvm-build/bin/clang",
         "CXX": cxx,
         "LD": ld}
  factory = BuildFactory()
  AddGetSourcesSteps(factory, llvm_svn_path, llvm_codebase, clang_codebase)

  factory.addStep(ShellCommand(name = 'Configure LLVM',
                               workdir = 'llvm-build',
                               env = env,
                               command = cmake_command))
  factory.addStep(ShellCommand(name = 'Build LLVM',
                               workdir = 'llvm-build',
                               env = env,
                               command = ['make', '-j%s' % make_parallelization]))

  # Force a full rebuild of Halide every time
  factory.addStep(RemoveDirectory(dir="halide-build"))

  for target in targets:
    p = make_parallelization
    if target == "test_performance": p = 1
    factory.addStep(ShellCommand(name = 'make ' + target,
                                 workdir = 'halide-build',
                                 env = env,
                                 command = ["make", "-f", "../halide/Makefile", "-j%s" % p, target],
                                 timeout = 3600))
  factory.addStep(MasterShellCommand(command = ["rm", "-f", "~/artifacts/halide-" + os + "-" + llvm + "-*.tgz"]))
    
  factory.addStep(
    FileUpload(slavesrc = "distrib/halide.tgz",
               workdir = "halide-build",
               mode = 0644,
               masterdest = make_distrib_name))

  return factory

def CreateWinFactory(llvm_codebase, clang_codebase, llvm_svn_path, llvm_version):
  factory = BuildFactory()
  AddGetSourcesSteps(factory, llvm_svn_path, llvm_codebase, clang_codebase)

  factory.addStep(
    ShellCommand(name = 'Configure LLVM',
                 workdir = 'llvm-build',
                 command = ["cmake",
                            "-DCMAKE_INSTALL_PREFIX=../llvm-install",
                            "-DLLVM_ENABLE_TERMINFO=OFF",
                            "-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips",
                            "-DLLVM_ENABLE_ASSERTIONS=ON",
                            "-DLLVM_BUILD_32_BITS=OFF",
                            "-DCMAKE_BUILD_TYPE=Release",
                            "../llvm/",
                            "-G",
                            "Visual Studio 12 Win64"]))

  for config in ["Release", "Debug"]:
    factory.addStep(RemoveDirectory(dir = 'llvm-build\\' + config))    

    factory.addStep(
      ShellCommand(workdir = 'llvm-build',
                   name = 'Build LLVM ' + config,
                   command = ["MSBuild.exe",
                              "/m",
                              "/t:Build",
                              "/p:Configuration=" + config,
                              '.\\ALL_BUILD.vcxproj']))

    factory.addStep(RemoveDirectory(dir = "halide-build-" + config))
    factory.addStep(MakeDirectory(dir = "halide-build-" + config))
    factory.addStep(
      ShellCommand(name = 'Configure Halide ' + config,
                   workdir = 'halide-build-' + config,
                   command = ["cmake",
                               Interpolate("-DLLVM_BIN=%(prop:workdir)s\\llvm-build\\" + config + "\\bin"),
                               Interpolate("-DLLVM_INCLUDE=%(prop:workdir)s\\llvm\\include;%(prop:workdir)s\\llvm-build\\include"),
                               Interpolate("-DLLVM_LIB=%(prop:workdir)s\\llvm-build\\" + config + "\\lib"),
                               "-DLLVM_VERSION=%s" % llvm_version,
                               "-DTARGET_NATIVE_CLIENT=OFF",
                               "-DBUILD_TYPE=" + config,
                               "-G",
                               "Visual Studio 12 Win64",
                               ".."]))
    factory.addStep(
      ShellCommand(name = 'Build Halide ' + config,
                   workdir = 'halide-build-' + config,
                   command = ["MSBuild.exe",
                              "/m",
                              "/t:Build",
                              "/p:Configuration=" + config,
                              ".\\ALL_BUILD.vcxproj"]))

    if config == "Release":
      factory.addStep(
        ShellCommand(name = 'Test Halide correctness ' + config,
                     workdir = 'halide-build-' + config,
                     timeout = 3600,
                     command = ['cmd', '/c',
                                'for', '%i', 'in', '(bin\\' + config + '\\correctness*.exe)', 'do', '(%i)']))
      factory.addStep(
        ShellCommand(name = 'Test Halide performance ' + config,
                     workdir = 'halide-build-' + config,
                     timeout = 3600,
                     command = ['cmd', '/c',
                                'for', '%i', 'in', '(bin\\' + config + '\\performance*.exe)', 'do', '(%i)']))
  return factory


c['builders'] = []

for os in ["linux-32-gcc48",
           "linux-64-gcc48",
           "linux-32-gcc49",
           "linux-64-gcc49",
           "mac-32",
           "mac-64",
           "arm-linux-32"]:

  cxx = "c++"
  ld = "ld"
    
  if "-32" in os:
    llvm_cmake_bits_flag = "-DLLVM_BUILD_32_BITS=ON"
  else:
    llvm_cmake_bits_flag = "-DLLVM_BUILD_32_BITS_OFF"

  llvm_cmake_command = [
      "cmake",
      "-DCMAKE_INSTALL_PREFIX=../llvm-install",
      "-DLLVM_ENABLE_TERMINFO=OFF",
      "-DLLVM_TARGETS_TO_BUILD=X86;ARM;NVPTX;AArch64;Mips",
      "-DLLVM_ENABLE_ASSERTIONS=ON",
      "-DCMAKE_BUILD_TYPE=Release",
      llvm_cmake_bits_flag,
      "../llvm/"]
    
  if os.startswith("linux"):
    llvms = ["trunk", "360", "352"]
    targets = [
        "distrib",
        "build_tests",
        "test_correctness",
        "test_performance",
        "test_generators",
        "test_tutorials",
        "test_apps",
        "test_python"]
    threads = 16
    if os.endswith("48"):
      cxx = "g++-4.8"
    else:
      cxx = "g++-4.9"
    ld = "ld"
    if "-32" in os:
      cxx += " -m32"
      ld += " -melf_i386"
    slave = "linux-slave"
  elif os.startswith("arm-linux"):
    llvms = ["trunk"]
    targets = [
        "distrib",
        "test_correctness",
        "test_performance",
        "test_generators",
        "test_tutorials"]
    threads = 1
    slave = "arm-linux-slave"
  else: # mac
    llvms = ["trunk", "360", "352"]
    targets = [
        "distrib",
        "build_tests",
        "test_correctness",
        "test_performance",
        "test_generators",
        "test_tutorials",
        "test_apps",
        "test_python"]
    threads = 4
    if "-32" in os:
      cxx += " -m32"
    slave = "mac-slave"
      
  for llvm in llvms:
    if llvm == "trunk":
      svn_path = "trunk"
    else:
      svn_path = "tags/RELEASE_" + llvm + "/final"

    halide_factory = \
      CreateFactory(cmake_command = llvm_cmake_command,
                    make_parallelization = threads,
                    llvm_svn_path = svn_path,
                    llvm_codebase = "llvm-" + llvm,
                    clang_codebase = "clang-" + llvm,                    
                    targets = targets,                    
                    cxx = cxx,
                    ld = ld,
                    os = os,
                    llvm = llvm)

    c['builders'].append(
      BuilderConfig(
        name = os + "-" + llvm,
        slavenames = [slave],
        factory = halide_factory,
        category = os))

for llvm in ["trunk"]:
  if llvm == "trunk":
    llvm_version = "38"
    svn_path = "trunk"
  else:
    llvm_version = llvm[0:2]
    svn_path = "tags/RELEASE_" + llvm + "/final"

  win_halide_factory = \
    CreateWinFactory(llvm_svn_path = svn_path,
                     llvm_codebase = 'llvm-' + llvm,
                     clang_codebase = 'clang-' + llvm,
                     llvm_version = llvm_version)

  c['builders'].append(
    BuilderConfig(name = "win-" + llvm,
                  slavenames = ["win-slave"],
                  factory = win_halide_factory,
                  category = "win"))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from os.path import expanduser

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.HTPasswdAprAuth(expanduser('~') + '/.htpasswd-halide'),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, order_console_by_time=True))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Halide"
c['titleURL'] = "http://halide-lang.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://104.154.46.123/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
