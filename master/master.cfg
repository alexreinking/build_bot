# -*- python -*-
# ex: set syntax=python:

from buildbot.worker import Worker
from buildbot.config import BuilderConfig
from buildbot.changes.gitpoller import GitPoller
from buildbot.changes.github import GitHubPullrequestPoller
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.svnpoller import split_file_alwaystrunk
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.plugins import util
from os.path import isfile
from twisted.internet import defer

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDWORKERS

import os

# The 'workers' list defines the set of recognized buildworkers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

password = open('halide_bb_pass.txt').read().strip()

workers = []
worker_suffixes = ['-1', '-2', '-3', '-4', '-5', '-6']
for sfx in worker_suffixes:
    workers.append(Worker('linux-worker' + sfx,     password, max_builds = 2))
    workers.append(Worker('mac-worker' + sfx,       password, max_builds = 2))
    workers.append(Worker('arm32-linux-worker' + sfx, password, max_builds = 1))
    workers.append(Worker('arm64-linux-worker' + sfx, password, max_builds = 1))
    workers.append(Worker('win-worker' + sfx,       password, max_builds = 1))

c['workers'] = workers

# 'protocols' contains information about protocols which master will use for
# communicating with workers.
# You must define at least 'port' option that workers could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildworkers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9990}}

####### LOCKS

# Performance testing requires exclusive use of a worker

# Compute-intensive build steps will grab this lock in reader
# mode. The performance test will grab it in exclusive mode.
performance_lock = util.WorkerLock("performance_lock",
                                  maxCount = 9999)

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of halide.

PYBIND11_BRANCH = 'v2.2'

c['change_source'] = []

token = open('github_token.txt').read().strip()

c['change_source'].append(GitPoller(
    repourl = 'git://github.com/halide/Halide.git',
    workdir = 'gitpoller-halide-workdir',
    branch = 'master',
    pollInterval = 60*5,  # Check Halide master every five minutes
    pollAtLaunch = True))

c['change_source'].append(GitPoller(
    repourl = 'git://github.com/pybind/pybind11.git',
    workdir = 'gitpoller-pybind11-workdir',
    branch = PYBIND11_BRANCH,
    pollInterval = 60*60*24, # Only check pybind11 once every 24 hours
    pollAtLaunch = True))

def pr_filter(pr):
    # Auto test anything in the halide master repo
    # print("Considering PR: ", pr['title'], pr['html_url'])
    # for (k, v) in pr.items():
    #    print(k, v)
    repo = pr['head']['repo']
    result = repo is not None and repo['full_name'] == 'halide/Halide'
    reviewers = pr['requested_reviewers']
    if reviewers is not None:
        for r in reviewers:
            result = result or (r['login'] == 'halidebuildbots')
    # print("Filter result: ", result)
    print("PR: ", pr['title'], pr['html_url'], ' => ', result)
    return result

c['change_source'].append(GitHubPullrequestPoller(
    owner = 'halide',
    repo = 'Halide',
    token = token,
    pullrequest_filter = pr_filter,
    pollInterval = 60*5,  # Check Halide PRs every five minutes
    pollAtLaunch = True))

c['change_source'].append(SVNPoller(
    repourl = 'http://llvm.org/svn/llvm-project/llvm/trunk',
    split_file = split_file_alwaystrunk,
    pollInterval = 60*60*24, # Only check llvm once every 24 hours
    pollAtLaunch = True))

c['change_source'].append(SVNPoller(
    repourl = 'http://llvm.org/svn/llvm-project/cfe/trunk',
    split_file = split_file_alwaystrunk,
    pollInterval = 60*60*24, # Only check llvm once every 24 hours
    pollAtLaunch = True))

c['change_source'].append(SVNPoller(
    repourl = 'http://llvm.org/svn/llvm-project/lld/trunk',
    split_file = split_file_alwaystrunk,
    pollInterval = 60*60*24, # Only check llvm once every 24 hours
    pollAtLaunch = True))

####### CODEBASES

all_repositories = {
    r'git://github.com/halide/Halide.git' : 'halide',
    u'https://github.com/halide/Halide.git' : 'halide',
    r'http://llvm.org/svn/llvm-project/llvm/trunk' : 'llvm-trunk',
    r'http://llvm.org/svn/llvm-project/cfe/trunk' : 'clang-trunk',
    r'http://llvm.org/svn/llvm-project/lld/trunk' : 'lld-trunk',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_800/final' : 'llvm-800',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_800/final' : 'clang-800',
    r'http://llvm.org/svn/llvm-project/lld/tags/RELEASE_800/final' : 'lld-800',
    r'http://llvm.org/svn/llvm-project/llvm/tags/RELEASE_900/final' : 'llvm-900',
    r'http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_900/final' : 'clang-900',
    r'http://llvm.org/svn/llvm-project/lld/tags/RELEASE_900/final' : 'lld-900',
    r'git://github.com/pybind/pybind11.git' : 'pybind11',
    u'https://github.com/pybind/pybind11.git' : 'pybind11',
}

def codebase_generator(chdict):
    repo = chdict['repository']
    if repo in all_repositories:
        return all_repositories[repo]
    else:
        return 'halide'

c['codebaseGenerator'] = codebase_generator

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.source.svn import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.steps.cmake import CMake
from buildbot.steps.worker import RemoveDirectory
from buildbot.steps.transfer import FileUpload
from buildbot.steps.worker import MakeDirectory
from buildbot.steps.master import MasterShellCommand
from buildbot.process.properties import Property
from buildbot.process.properties import renderer
from buildbot.process.properties import Interpolate

def add_get_source_steps(factory, llvm):

  llvm_codebase  = 'llvm-' + llvm
  clang_codebase = 'clang-' + llvm
  lld_codebase = 'lld-' + llvm
  if llvm == 'trunk':
    llvm_svn_path = 'trunk'
  else:
    llvm_svn_path = 'tags/RELEASE_' + llvm + '/final'

  factory.addStep(Git(name = 'Get Halide master',
                      locks = [performance_lock.access('counting')],
                      codebase = 'halide',
                      workdir = 'halide',
                      repourl = 'git://github.com/halide/Halide.git',
                      mode = 'incremental'))

  # PyBind11 is a header-only library: we don't need to build it, we just need to pull it
  factory.addStep(Git(name = 'Get PyBind11',
                      locks = [performance_lock.access('counting')],
                      codebase = 'pybind11',
                      workdir = 'pybind11',
                      repourl = 'git://github.com/pybind/pybind11.git',
                      branch = PYBIND11_BRANCH,
                      mode = 'incremental'))

  factory.addStep(ShellCommand(name = 'svn cleanup',
                               locks = [performance_lock.access('counting')],
                               flunkOnFailure = False,
                               workdir = 'llvm',
                               command = ['svn', 'cleanup']))

  factory.addStep(ShellCommand(name = 'svn cleanup',
                               locks = [performance_lock.access('counting')],
                               flunkOnFailure = False,
                               workdir = 'llvm/tools/clang',
                               command = ['svn', 'cleanup']))

  factory.addStep(ShellCommand(name = 'svn cleanup',
                               locks = [performance_lock.access('counting')],
                               flunkOnFailure = False,
                               workdir = 'llvm/tools/lld',
                               command = ['svn', 'cleanup']))

  factory.addStep(SVN(name = 'Get LLVM source',
                      locks = [performance_lock.access('counting')],
                      codebase = llvm_codebase,
                      workdir = 'llvm',
                      repourl = r'http://llvm.org/svn/llvm-project/llvm/%s' % llvm_svn_path,
                      mode = 'incremental'))

  factory.addStep(SVN(name = 'Get Clang source',
                      locks = [performance_lock.access('counting')],
                      codebase = clang_codebase,
                      workdir = 'llvm/tools/clang',
                      repourl = r'http://llvm.org/svn/llvm-project/cfe/%s' % llvm_svn_path,
                      mode = 'incremental'))

  factory.addStep(SVN(name = 'Get LLD source',
                      locks = [performance_lock.access('counting')],
                      codebase = lld_codebase,
                      workdir = 'llvm/tools/lld',
                      repourl = r'http://llvm.org/svn/llvm-project/lld/%s' % llvm_svn_path,
                      mode = 'incremental'))

@renderer
def get_distrib_name(props):
  rev = props.getProperty('got_revision')['halide']
  builder = props.getProperty('buildername')
  if builder.startswith('win'): suffix = '.zip'
  else: suffix = '.tgz'
  # Always upload to /home/abadams/artifacts -- regardless of user --
  # since that's there the public-facing webpage looks
  return '/home/abadams/artifacts/halide-' + builder + '-' + rev + suffix

def get_cmake_generator(os):
  if os.startswith('mingw'):
    return 'MSYS Makefiles'
  elif os.startswith('win'):
    if '-32' in os:
      return 'Visual Studio 15'
    else:
      assert '-64' in os
      return 'Visual Studio 15 Win64'
  else:
    return 'Unix Makefiles'

def get_cmake_options(os):
  options = []
  if os.startswith('win'):
    options.append('-Thost=x64')
  return options

def get_llvm_cmake_definitions(os, config, llvm):
  definitions = {
    'CMAKE_BUILD_TYPE': config,
    'CMAKE_INSTALL_PREFIX': '../llvm-install-%s' % config,
    'LLVM_BUILD_32_BITS': ('ON' if '-32' in os else 'OFF'),
    # mingw gcc 5.2 doesn't compile llvm correctly with assertions on
    'LLVM_ENABLE_ASSERTIONS': ('OFF' if os.startswith('mingw') else 'ON'),
    'LLVM_ENABLE_RTTI': 'ON',
    'LLVM_ENABLE_TERMINFO': 'OFF',
    'LLVM_TARGETS_TO_BUILD': 'X86;ARM;NVPTX;AArch64;Mips;Hexagon;PowerPC' + (';WebAssembly' if llvm == 'trunk' else ''),
  }

  if os.startswith('linux-32'):
    definitions['CMAKE_FIND_ROOT_PATH'] = '/usr/lib/i386-linux-gnu'
    definitions['CMAKE_FIND_ROOT_PATH_MODE_LIBRARY'] = 'ONLY'

  # CMake is infamously flaky about finding the 'right' version of Python
  # reliably, and configuring your system to change its preferences
  # is apparently not a thing. On Windows this is catastrophic
  # under mingw, due to mingw-vs-windows path styles; ensure that
  # CMake is explicitly pointed at Windows Python 2.7 for now.
  # Note that we must specify the path in Windows format, not mingw format.
  if os.startswith('win') or os.startswith('mingw'):
    definitions['PYTHON_EXECUTABLE'] = 'c:/Python27/python'

  # This disables an XCode setting that can get enabled by default
  # when assertions are enabled, but only if your XCode install has
  # certain frameworks installed; we want it disabled, as it prevents
  # prebuilt libraries from working properly with XCode 9.x.
  if os.startswith('mac'):
    definitions['LLVM_ENABLE_SUPPORT_XCODE_SIGNPOSTS'] = 'FORCE_OFF'

  return definitions


def get_env(os, config):
  env = {'LLVM_CONFIG': '../llvm-build-%s/bin/llvm-config' % config,
         'CLANG': '../llvm-build-%s/bin/clang' % config,
         'PYBIND11_PATH': '../pybind11'}

  cxx = 'c++'
  cc = 'cc'
  ld = 'ld'

  if os.startswith('linux'):
    if '-gcc53' in os:
      cc = 'gcc-5.3'
      cxx = 'g++-5.3'
    else:
      assert(False)

    ld = 'ld'
    if '-32' in os:
      cxx += ' -m32'
      cc += ' -m32'
      ld += ' -melf_i386'
  elif os.startswith('mac'):
    if '-32' in os:
      cxx += ' -m32'
      cc += ' -m32'

  # The linux and arm linux buildbots have ccache installed
  if 'linux' in os:
    cxx = 'ccache ' + cxx
    cc = 'ccache ' + cc

  env['CXX'] = cxx
  env['CC'] = cc
  env['LD'] = ld

  if os.startswith('linux'):
      # Environment variables for testing Hexagon DSP
      env['HL_HEXAGON_TOOLS'] = '/usr/local/hexagon'
      env['HL_HEXAGON_SIM_REMOTE'] = '${PWD}/worker/' + os + '-trunk/halide/src/runtime/hexagon_remote/bin/v60/hexagon_sim_remote'
      env['HL_HEXAGON_SIM_CYCLES'] = '1'
      env['LD_LIBRARY_PATH'] = '${LD_LIBRARY_PATH}:${PWD}/worker/' + os + '-trunk/halide/src/runtime/hexagon_remote/bin/host:/usr/local/hexagon/lib/iss'
  elif os.startswith('mac'):
      # Environment variable for turning on Metal API validation
      # This will have no effect on CPU testing, just Metal testing
      env['METAL_DEVICE_WRAPPER_TYPE'] = '1'

  return env

def get_make_threads(os):
  if os.startswith('linux'):
    return 16
  elif os.startswith('mac'):
    return 4
  elif os.startswith('arm'):
    return 4
  elif os.startswith('mingw'):
    return 16
  else:
    return 1

def get_targets(os, llvm):
  targets = [('distrib', 'host'),
             ('build_tests', 'host'),
             ('test_correctness', 'host'),
             ('test_generator', 'host')]

  if not os.startswith('mingw'):
    # mingw's timers appear to be very low-resolution
    targets.append(('test_performance', 'host'))

  if os.startswith('linux-32-gcc53'):
    # Also test without sse 4.1
    targets.append(('test_correctness', 'x86-32'))

  if os.startswith('linux-64-gcc53') or os.startswith('mac-64'):
    # extended cpu/gpu tests
    targets.extend([('test_correctness', 'x86-64'),
                    ('test_correctness', 'x86-64-sse41'),
                    ('test_python', 'host')])

  if os.startswith('linux-64-gcc53') or os.startswith('mingw-64') or os.startswith('mac-64'):
    targets.extend([('test_apps', 'host'),
                    ('test_tutorial', 'host')])

  if os.startswith('linux-64-gcc53') or os.startswith('mingw-64'):
    # The linux and mingw build-bots have an nvidia card
    targets.extend([('test_correctness', 'host-cuda'),
                    ('test_generator', 'host-cuda'),
                    ('test_apps', 'host-cuda'),
                    ('test_correctness', 'host-opencl'),
                    ('test_generator', 'host-opencl'),
                    ('test_apps', 'host-opencl'),
                    ('correctness_gpu_multi_device', 'host-cuda-opencl')])

  if os.startswith('mac-64'):
    # test metal on OS X
    targets.extend([('test_correctness', 'host-metal'),
                    ('test_generator', 'host-metal'),
                    ('test_apps', 'host-metal')])

  # TODO: temporarily disabled due to https://github.com/halide/Halide/issues/3909
  # if os.startswith('mingw-64') or os.startswith('win-64'):
  #   # test d3d12 on windows
  #   targets.extend([('test_correctness', 'host-d3d12compute'),
  #                   ('test_generator', 'host-d3d12compute'),
  #                   ('test_apps', 'host-d3d12compute')])

  if os.startswith('linux-64-gcc53') and llvm == 'trunk':
    # Also test hexagon using the simulator
    for t in ['host-hvx_128', 'host-hvx_64']:
      targets.extend([('test_correctness', t),
                      ('test_generator', t),
                      ('test_apps', t)])

  return targets

def get_workers(os):
  if os.startswith('linux'):
    return ['linux-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('mac'):
    return ['mac-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('win') or os.startswith('mingw'):
    return ['win-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('arm32-linux'):
    return ['arm32-linux-worker' + sfx for sfx in worker_suffixes]
  elif os.startswith('arm64-linux'):
    return ['arm64-linux-worker' + sfx for sfx in worker_suffixes]

def create_factory(os, llvm):

  if os.startswith('win'): return create_win_factory(os, llvm)

  config        = 'release'
  env           = get_env(os, config)
  targets       = get_targets(os, llvm)
  make_threads  = get_make_threads(os)

  factory = BuildFactory()

  add_get_source_steps(factory, llvm)

  factory.addStep(CMake(name = 'Configure LLVM',
                        description = 'Configure LLVM',
                        locks = [performance_lock.access('counting')],
                        haltOnFailure = True,
                        env = env,
                        workdir = 'llvm-build-%s' % config,
                        path = '../llvm/',
                        generator = get_cmake_generator(os),
                        definitions = get_llvm_cmake_definitions(os, config, llvm),
                        options = get_cmake_options(os)))

  factory.addStep(ShellCommand(name = 'Build LLVM',
                               description = 'Build LLVM',
                               locks = [performance_lock.access('counting')],
                               workdir = 'llvm-build-%s' % config,
                               env = env,
                               haltOnFailure = True,
                               command = ['make', '-j%s' % make_threads]))

  # Force a full rebuild of Halide every time
  factory.addStep(RemoveDirectory(dir='halide-build'))

  for (target, hl_target) in targets:
    target_env = env.copy()
    target_env['HL_TARGET'] = hl_target
    target_env['HL_JIT_TARGET'] = hl_target

    if os.startswith('mingw'):
      # Current NVidia drivers on our Windows buildbots can corrupt their own
      # cache, leading to many spurious failures. Disable the cache
      # for now, pending NVidia investigation.
      target_env['CUDA_CACHE_DISABLE'] = '1'

    p = make_threads
    lock_mode = 'counting'
    if target == 'test_performance' or target == 'test_tutorial':
      p = 1
      lock_mode = 'exclusive'
    factory.addStep(ShellCommand(name = 'make ' + target,
                                 description = target + ' ' + hl_target,
                                 locks = [performance_lock.access(lock_mode)],
                                 workdir = 'halide-build',
                                 env = target_env,
                                 haltOnFailure = (target == 'distrib'),
                                 command = ['make', '-f', '../halide/Makefile', '-j%s' % p, target],
                                 timeout = 3600))
    if target == 'distrib' and 'testbranch' not in os:
      factory.addStep(
        FileUpload(workersrc = 'distrib/halide.tgz',
                   workdir = 'halide-build',
                   mode = 0644,
                   masterdest = get_distrib_name))

      factory.addStep(MasterShellCommand(
        workdir = '/home/abadams/artifacts',
        command = ['bash', '/home/abadams/build_bot_new/clean_artifacts.sh']))

  return factory

def create_win_factory(os, llvm):
  assert os.startswith('win')

  factory = BuildFactory()
  add_get_source_steps(factory, llvm)

  make_distro = '-distro' in os

  if make_distro:
    configs = ['Release', 'Debug']
  else:
    configs = ['Release']

  # Build llvm and Halide in release and debug modes
  for config in configs:

    factory.addStep(RemoveDirectory(dir = 'halide-build-' + config, haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'halide-build-' + config, haltOnFailure = False))

    if llvm == 'trunk':
      # Only do clean rebuilds of llvm on trunk
      factory.addStep(RemoveDirectory(dir = 'llvm-build-' + config, haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'llvm-build-' + config, haltOnFailure = False))

    if llvm == 'trunk':
      factory.addStep(RemoveDirectory(dir = 'llvm-install-' + config, haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'llvm-install-' + config, haltOnFailure = False))

    factory.addStep(CMake(name = 'Configure LLVM',
                          description = 'Configure LLVM',
                          locks = [performance_lock.access('counting')],
                          haltOnFailure = True,
                          workdir = 'llvm-build-%s' % config,
                          path = '../llvm/',
                          generator = get_cmake_generator(os),
                          definitions = get_llvm_cmake_definitions(os, config, llvm),
                          options = get_cmake_options(os)))

    factory.addStep(
      ShellCommand(workdir = 'llvm-build-' + config,
                   locks = [performance_lock.access('counting')],
                   name = 'Build LLVM ' + config,
                   description = 'Build LLVM ' + config,
                   haltOnFailure = True,
                   command = ['MSBuild.exe',
                              '/m:16',
                              '/t:Build',
                              '/p:Configuration=' + config,
                              '/v:m',
                              '.\\INSTALL.vcxproj']))

    factory.addStep(CMake(name = 'Configure Halide %s' % config,
                          description = 'Configure Halide %s' % config,
                          locks = [performance_lock.access('counting')],
                          haltOnFailure = True,
                          workdir = 'halide-build-' + config,
                          path = '..\\halide',
                          generator = get_cmake_generator(os),
                          definitions = {
                            'CMAKE_BUILD_TYPE': config,
                            'LLVM_DIR': Interpolate('%(prop:builddir)s\\llvm-install-' + config + '\\lib\\cmake\\llvm'),
                          },
                          options = get_cmake_options(os)))


    factory.addStep(
      ShellCommand(name = 'Build Halide ' + config,
                   description = 'Build Halide ' + config,
                   locks = [performance_lock.access('counting')],
                   workdir = 'halide-build-' + config,
                   haltOnFailure = True,
                   command = ['MSBuild.exe',
                              '/m:16',
                              '/t:Build',
                              '/p:Configuration=' + config,
                              '/v:m',
                              '.\\ALL_BUILD.vcxproj']))


  if make_distro:
    # Make and upload a distro
    factory.addStep(RemoveDirectory(dir = 'distrib', haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'distrib', haltOnFailure = False))
    factory.addStep(MakeDirectory(dir = 'distrib\\halide', haltOnFailure = False))
    for d in ['Release', 'Debug', 'include', 'tools', 'tutorial', 'tutorial\\figures']:
      factory.addStep(MakeDirectory(dir = 'distrib\\halide\\' + d, haltOnFailure = False))

    file_pairs = [
        ('..\\halide-build-Release\\bin\\Release\\Halide.dll', 'Release'),
        ('..\\halide-build-Release\\lib\\Release\\Halide.lib', 'Release'),
        ('..\\halide-build-Debug\\bin\\Debug\\Halide.dll', 'Debug'),
        ('..\\halide-build-Debug\\lib\\Debug\\Halide.lib', 'Debug'),
        ('..\\halide-build-Release\\include\\Halide.h', 'include'),
        ('..\\halide\\src\\runtime\\HalideRuntim*.h', 'include'),
        ('..\\halide\\src\\runtime\\HalideBuffer.h', 'include'),
        ('..\\halide\\tools\\mex_halide.m', 'tools'),
        ('..\\halide\\tools\\GenGen.cpp', 'tools'),
        ('..\\halide\\tools\\RunGen.h', 'tools'),
        ('..\\halide\\tools\\RunGenMain.cpp', 'tools'),
        ('..\\halide\\tools\\halide_benchmark.h', 'tools'),
        ('..\\halide\\tools\\halide_image.h', 'tools'),
        ('..\\halide\\tools\\halide_image_io.h', 'tools'),
        ('..\\halide\\tools\\halide_image_info.h', 'tools'),
        ('..\\halide\\tools\\halide_malloc_trace.h', 'tools'),
        ('..\\halide\\tools\\halide_trace_config.h', 'tools'),
        ('..\\halide\\tutorial\\images\\*.png', 'tutorial\\figures'),
        ('..\\halide\\tutorial\\figures\\*.gif', 'tutorial\\figures'),
        ('..\\halide\\tutorial\\figures\\*.jpg', 'tutorial\\figures'),
        ('..\\halide\\tutorial\\figures\\*.mp4', 'tutorial\\figures'),
        ('..\\halide\\tutorial\\*.cpp', 'tutorial'),
        ('..\\halide\\tutorial\\*.h', 'tutorial'),
        ('..\\halide\\tutorial\\*.sh', 'tutorial'),
        ('..\\halide-build-Release\\halide_config.*', '.'),
        ('..\\halide\\halide.cmake', '.'),
        ('..\\halide\\README*.md', '.')]
    for (file, dir) in file_pairs:
      factory.addStep(
        ShellCommand(name = 'Copying ' + file,
                     workdir = 'distrib',
                     command = ['copy', file, 'halide\\' + dir + '\\']))

    factory.addStep(
      ShellCommand(name = 'Zipping distribution',
                   workdir = 'distrib',
                   command = ['C:\\Program Files\\7-Zip\\7z.exe',
                              'a',
                              'halide.zip',
                              'halide']))

    factory.addStep(
      FileUpload(workersrc = 'halide.zip',
                 workdir = 'distrib',
                 mode = 0644,
                 masterdest = get_distrib_name))
  else:
    # Run the tests
    env = {}

    targets = ['host', 'host-opencl', 'host-cuda']
    # TODO: temporarily disabled due to https://github.com/halide/Halide/issues/3909
    # if '-64' in os:
    #   targets.append('host-d3d12compute')

    for hl_target in targets:
      target_env = env.copy()
      target_env['HL_TARGET'] = hl_target
      target_env['HL_JIT_TARGET'] = hl_target

      # Current NVidia drivers on our Windows buildbots can corrupt their own
      # cache, leading to many spurious failures. Disable the cache
      # for now, pending NVidia investigation.
      target_env['CUDA_CACHE_DISABLE'] = '1'

      # We don't ever want an Abort, Rerty, Ignore dialog in our tests
      target_env['HL_DISABLE_WINDOWS_ABORT_DIALOG'] = '1'

      for testgroup in ['correctness', 'generator']:
        factory.addStep(
          ShellCommand(name = testgroup,
                       description = testgroup,
                       locks = [performance_lock.access('counting')],
                       workdir = 'halide-build-Release',
                       env = target_env,
                       timeout = 3600,
                       command = ['MSBuild.exe',
                                  '/m:16',
                                  '/t:Build',
                                  '/p:Configuration=Release',
                                  '/v:m',
                                  '.\\test_' + testgroup + '.vcxproj']))

      # TODO: add 'tutorial' to this testgroup (requires libjpeg, libpng, etc)
      for testgroup in ['performance']:
        factory.addStep(
          ShellCommand(name = testgroup,
                       description = testgroup,
                       locks = [performance_lock.access('exclusive')],
                       workdir = 'halide-build-Release',
                       env = target_env,
                       timeout = 3600,
                       command = ['MSBuild.exe',
                                  '/t:Build',
                                  '/p:Configuration=Release',
                                  '/v:m',
                                  '.\\test_' + testgroup + '.vcxproj']))

  return factory


def create_builder(os, llvm):
  factory = create_factory(os, llvm)

  tags = os.split('-')
  tags.append('llvm-' + llvm)
  if 'testbranch' not in tags:
    tags.append('master')

  builder = BuilderConfig(name = os + '-' + llvm,
                          workernames = get_workers(os),
                          factory = factory,
                          collapseRequests = True,
                          tags = tags)

  builder.llvm = llvm
  builder.os = os

  c['builders'].append(builder)

def create_scheduler(llvm):

  def master_only(change):
    # For PyBind11, ignore branches and always accept the change
    if 'pybind11' in change.repository:
      return True
    return change.branch == 'master' or change.branch is None

  def not_master(change):
    # For PyBind11, ignore branches and always accept the change
    if 'pybind11' in change.repository:
      return True
    return not master_only(change)

  builders = [str(b.name) for b in c['builders'] if b.llvm == llvm and 'testbranch' not in b.name]
  scheduler = SingleBranchScheduler(
      name = 'halide-' + llvm,
      codebases = ['halide', 'pybind11', 'llvm-' + llvm, 'clang-' + llvm, 'lld-' + llvm],
      change_filter = util.ChangeFilter(filter_fn = master_only),
      treeStableTimer = 60*5, # seconds
      builderNames = builders)

  c['schedulers'].append(scheduler)

  builders = [str(b.name) for b in c['builders'] if b.llvm == llvm and 'testbranch' in b.name]
  if builders:
      scheduler = SingleBranchScheduler(
          name = 'halide-testbranch-' + llvm,
          codebases = ['halide', 'pybind11', 'llvm-' + llvm, 'clang-' + llvm, 'lld-' + llvm],
          change_filter = util.ChangeFilter(filter_fn = not_master),
          treeStableTimer = 60*5, # seconds
          builderNames = builders)

      c['schedulers'].append(scheduler)

  builders = [str(b.name) for b in c['builders'] if b.llvm == llvm]
  scheduler = ForceScheduler(
    name = 'force-' + llvm,
    builderNames = builders,
    codebases = ['halide', 'pybind11', 'llvm-' + llvm, 'clang-' + llvm, 'lld-' + llvm])

  c['schedulers'].append(scheduler)

c['builders'] = []

# Builders that test master. We test the most recent official release
# of llvm on everything, to make it possible to do binary
# distributions with a uniform llvm version. We also test against llvm
# trunk, with lower priority, so that we can bisect llvm trunk
# breakages on various platforms if they are discovered late.
create_builder('arm32-linux-32', 'trunk')
create_builder('arm64-linux-64', 'trunk')
create_builder('arm32-linux-32', '800')
create_builder('arm64-linux-64', '800')

create_builder('linux-32-gcc53', 'trunk')
create_builder('linux-64-gcc53', 'trunk')
create_builder('linux-32-gcc53', '800')
create_builder('linux-32-gcc53', '900')
create_builder('linux-64-gcc53', '800')
create_builder('linux-64-gcc53', '900')

create_builder('mac-64', 'trunk')
create_builder('mac-64', '800')
create_builder('mac-64', '900')

create_builder('win-32', 'trunk')
create_builder('win-64', 'trunk')
create_builder('win-32-distro', '800')
create_builder('win-64-distro', '800')

create_builder('mingw-64', '800')

# Make some builders just for testing branches. Picking a fixed llvm version will avoid LLVM rebuilds for the best turnaround.
create_builder('win-64-testbranch',         '800')
create_builder('win-32-testbranch',         '800')
create_builder('mac-64-testbranch',         '800')
create_builder('linux-64-gcc53-testbranch', '800')
create_builder('linux-32-gcc53-testbranch', '800')
create_builder('mingw-64-testbranch',       '800')
create_builder('arm64-linux-64-testbranch', '800')
create_builder('arm32-linux-32-testbranch', '800')

# Check for build breakages against other llvm versions too
create_builder('linux-64-gcc53-testbranch', '900')
create_builder('linux-64-gcc53-testbranch', 'trunk')

c['schedulers'] = []
create_scheduler('trunk')
create_scheduler('900')
create_scheduler('800')

# Create a scheduler to force a test of a branch
builders = [str(b.name) for b in c['builders'] if 'testbranch' in b.name]
scheduler = ForceScheduler(
  name = 'testbranch',
  builderNames = builders,
  codebases = ['halide',
               'pybind11',
               'llvm-900',
               'clang-900',
               'lld-900',
               'llvm-800',
               'clang-800',
               'lld-800',
               'llvm-trunk',
               'clang-trunk',
               'lld-trunk'])
c['schedulers'].append(scheduler)

# Set the builder priorities
def prioritize_builders(master, builders):
  def importance(builder):
    # Branch testers all need to come back before we can merge a PR,
    # so they all have equal highest priority.
    if 'testbranch' in builder.name: return 0

    # non-branch testers are mostly used for bisecting failures that
    # didn't show up in the branch testers and doing binary
    # releases. We care most about the most recently-released llvm so
    # that we have a full set of builds for releases, then llvm trunk
    # for bisection, then older llvm versions.
    if '900' in builder.name: return 1
    if 'trunk' in builder.name: return 2
    if '800' in builder.name: return 3
    return 4

  builders.sort(key = importance)

  return builders

c['prioritizeBuilders'] = prioritize_builders

####### WEB SERVER

password = open('buildbot_www_pass.txt').read().strip()

authz = util.Authz(
      allowRules=[util.ForceBuildEndpointMatcher(role="admins"),
                  util.StopBuildEndpointMatcher(role="admins"),
                  util.RebuildBuildEndpointMatcher(role="admins"),
                  util.EnableSchedulerEndpointMatcher(role="admins")],
      roleMatchers=[util.RolesFromUsername(roles=["admins"], usernames=["halidenightly"])])

c['www'] = dict(
    auth = util.UserPasswordAuth({'halidenightly': password}),
    authz = authz,
    port = 8012,
    plugins = dict(
        waterfall_view = {},
        console_view = {}
    )
)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'Halide'
c['titleURL'] = 'http://halide-lang.org'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'https://buildbot.halide-lang.org/master/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}

###### GitHub Integration

from buildbot.plugins import reporters

builders = [str(b.name) for b in c['builders']]
gs = reporters.GitHubStatusPush(token = token,
                                context = Interpolate("buildbot/%(prop:buildername)s"),
                                startDescription = 'Build started.',
                                endDescription = 'Build done.',
                                verbose = True,
                                builders = builders)
c['services'] = [gs]
